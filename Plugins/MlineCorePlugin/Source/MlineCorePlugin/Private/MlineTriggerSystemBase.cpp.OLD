// Fill out your copyright notice in the Description page of Project Settings.

#include "MlineTriggerSystemBase.h"
#include "Kismet/GameplayStatics.h"
#include "Components/AudioComponent.h"
#include "Components/WidgetComponent.h"
#include "Particles/ParticleSystemComponent.h"
#include "NiagaraComponent.h"
#include "Components/BoxComponent.h"



DEFINE_LOG_CATEGORY(LogMlineTriggerSystemBase);
// Sets default values
AMlineTriggerSystemBase::AMlineTriggerSystemBase()
{
 	// Set this actor to call Tick() every frame.  You can turn this off to improve performance if you don't need it.
	PrimaryActorTick.bCanEverTick = true;
	


}

// Called when the game starts or when spawned
void AMlineTriggerSystemBase::BeginPlay()
{
	Super::BeginPlay();
}


// Called every frame
void AMlineTriggerSystemBase::Tick(float DeltaTime)
{
	Super::Tick(DeltaTime);

}


void AMlineTriggerSystemBase::OnConstruction(const FTransform& Transform)
{

	Components.Empty();

	TArray<USceneComponent*> ChildernComponents;
	RootComponent->GetChildrenComponents(true, ChildernComponents);


	for (USceneComponent* component : ChildernComponents)
	{
		if (!component->GetName().Contains("BillboardComponent"))
		{
			Components.Add(FName(component->GetName()), component);
		}
	}
	TArray<FName> Keys;
	Components.GetKeys(Keys);
	for (FName key : Keys)
	{
		UActorComponent* actorComponent;

		if (Components.Contains(key)) actorComponent = *Components.Find(key);
		else continue;

		FString className = actorComponent->GetClass()->GetName();

		if (className.Compare("MlineTriggerCustomEvent") == 0)
		{
			UMlineTriggerCustomEvent* CustomEventComponent = static_cast<UMlineTriggerCustomEvent*>(actorComponent);
			CustomEventComponent->Initalize();
		}

	}

#pragma region DataSetting
	Keys.Empty();
	TriggerBoxComponentDataAtMap.GetKeys(Keys);
	for (FName key : Keys)
	{
		UActorComponent* actorComponent;
		FTriggerSystemComponentData* conmponentData;
		
		//UParticleSystemComponent* particleSystemComponent;
		//	UNiagaraComponent* 
		//	UWidgetComponent*
		//	UMlineTriggerCustomEvent*


		if (Components.Contains(key)) actorComponent = *Components.Find(key);
		else continue;

		if (TriggerBoxComponentDataAtMap.Contains(key)) conmponentData = TriggerBoxComponentDataAtMap.Find(key);
		else continue;


		if (actorComponent->IsA(UAudioComponent::StaticClass()))
		{
			(*conmponentData).Component = ETriggerBoxComponentType::Audio;
		}
		else if (actorComponent->IsA(UFXSystemComponent::StaticClass()))
		{
			(*conmponentData).Component = ETriggerBoxComponentType::Effect;

			if (actorComponent->IsA(UParticleSystemComponent::StaticClass())) {
				(*conmponentData).EffectData.EffectType = EEffectType::ParticleSystem;
			}
			else if (actorComponent->IsA(UNiagaraComponent::StaticClass())) {
				(*conmponentData).EffectData.EffectType = EEffectType::NiagaraSystem;

			}
		}
		else if (actorComponent->IsA(UWidgetComponent::StaticClass()))
		{
			(*conmponentData).Component = ETriggerBoxComponentType::UI;
		}
		else if (actorComponent->IsA(UMlineTriggerCustomEvent::StaticClass()))
		{
			(*conmponentData).Component = ETriggerBoxComponentType::CustomEvent;
		}
		
		//UE_LOG(LogMlineTriggerSystemBase, Warning, TEXT("%s"),);


		switch ((*conmponentData).Component)
		{
			int result;
		case ETriggerBoxComponentType::Audio:
		{
			UAudioComponent* audioComponent = dynamic_cast<UAudioComponent*>(actorComponent);
			if (audioComponent)
			{
				audioComponent->SetSound((*conmponentData).AudioData.Sound);
				audioComponent->AttenuationSettings = (*conmponentData).AudioData.SoundAttenuation;
				audioComponent->SetPitchMultiplier((*conmponentData).AudioData.Pitch);
				audioComponent->SetVolumeMultiplier((*conmponentData).AudioData.Volume);
			}
			break;
		}
		case ETriggerBoxComponentType::Effect:
		{
			switch ((*conmponentData).EffectData.EffectType)
			{
			case EEffectType::ParticleSystem:
			{
				UParticleSystemComponent* particleSystemComponent = dynamic_cast<UParticleSystemComponent*>(actorComponent);
				if (particleSystemComponent)
				{
					particleSystemComponent->SetTemplate((*conmponentData).EffectData.ParticleSystem);
				}
				break;
			}
			case EEffectType::NiagaraSystem:
			{
				UNiagaraComponent* niagaraComponent = dynamic_cast<UNiagaraComponent*>(actorComponent);
				if (niagaraComponent)
				{
					niagaraComponent->SetAsset((*conmponentData).EffectData.NiagaraSystem);
				}
				break;
			}
			}
			break;
		}
		case ETriggerBoxComponentType::Animaition:
		{
			result = ActorSetting(key,
				&(*conmponentData).AnimationData.AnimationTargerActor,
				&(*conmponentData).AnimationData.AnimationTargerActorClass,
				&(*conmponentData).AnimationData.AnimationTargerActorName);
			break;
		}
		case ETriggerBoxComponentType::UI:
		{
			result = ActorSetting(key,
				&(*conmponentData).UIData.AttachedActor,
				&(*conmponentData).UIData.AttachedActorClass,
				&(*conmponentData).UIData.AttachedActorName);
			UWidgetComponent* widgetComponent = dynamic_cast<UWidgetComponent*>(actorComponent);
			if (widgetComponent) 
			{
				widgetComponent->SetWidgetClass((*conmponentData).UIData.WidgetClass);
			}

			break;
		}
		case ETriggerBoxComponentType::CustomEvent:
		{

			for (int i = 0; i < (*conmponentData).CustomEventDatas.Num(); i++)
			{
				result = ActorSetting(key,
					&(*conmponentData).CustomEventDatas[i].CustomEventActor,
					&(*conmponentData).CustomEventDatas[i].CustomEventActorClass,
					&(*conmponentData).CustomEventDatas[i].CustomEventActorName);

				auto CustomEventData = (*conmponentData).CustomEventDatas[i];

				if (actorComponent && CustomEventData.CustomEventActor && actorComponent->IsValidLowLevel() && CustomEventData.CustomEventActor->IsValidLowLevel())
				{
					FString FunctionName = CustomEventData.FunctionName;
					UMlineTriggerCustomEvent* CustomEventComponent = static_cast<UMlineTriggerCustomEvent*>(actorComponent);
					CustomEventComponent->SetEvent(CustomEventData.CustomEventActor, FName(*FunctionName));
				}
			}
			break;
		}
		}
		//if ((*TargetActor)->IsValidLowLevel())
		//{
		//	*actorName = (*TargetActor)->GetName();
		//	*actorClass = (*TargetActor)->GetClass();


		//	TriggerBoxComponentDataAtMap.Add(key, conmponentData);

		//}

		//else if (!(*actorName).Equals("") && (*actorClass)->IsValidLowLevel())
		//{
		//	UGameplayStatics::GetAllActorsOfClass(GetWorld(), *actorClass, foundActors);

		//	for (AActor* actor : foundActors)
		//	{
		//		if (actor->GetName().Equals(*actorName))
		//		{
		//			*TargetActor = actor;

		//			TriggerBoxComponentDataAtMap.Add(key, conmponentData);
		//			break;
		//		}
		//	}

		//}

	}
#pragma endregion


	//?迭???? ?????? ????
	//for (int i = 0; i < TriggerBoxComponentData.Num(); i++)
	//{
	//	FTriggerBoxComponentData conmponentData = TriggerBoxComponentData[i];
	//	AActor** TargetActor = nullptr;
	//	FString* actorName = nullptr;
	//	TSubclassOf<AActor>* actorClass = nullptr;
	//	TArray<AActor*> foundActors;

	//	switch (TriggerBoxComponentData[i].Component)
	//	{
	//	case ETriggerBoxComponentType::Animaition:
	//		TargetActor = &conmponentData.AnimationData.AnimationTargerActor;
	//		actorClass = &conmponentData.AnimationData.AnimationTargerActorClass;
	//		actorName = &conmponentData.AnimationData.AnimationTargerActorName;
	//		break;

	//	case ETriggerBoxComponentType::UI:
	//		TargetActor = &conmponentData.UIData.AttachedActor;
	//		actorClass = &conmponentData.UIData.AttachedActorClass;
	//		actorName = &conmponentData.UIData.AttachedActorName;
	//		break;

	//	case ETriggerBoxComponentType::CustomEvent:
	//		TargetActor = &conmponentData.CustomEventData.CustomEventActor;
	//		actorClass = &conmponentData.CustomEventData.CustomEventActorClass;
	//		actorName = &conmponentData.CustomEventData.CustomEventActorName;
	//		break;

	//	}

	//	if (TargetActor != nullptr && (*TargetActor)->IsValidLowLevel())
	//	{
	//		*actorName = (*TargetActor)->GetName();
	//		*actorClass = (*TargetActor)->GetClass();


	//		TriggerBoxComponentData[i] = conmponentData;
	//	}
	//	else if (actorName != nullptr && actorClass != nullptr && !(*actorName).Equals("") && (*actorClass)->IsValidLowLevel())
	//	{
	//		UGameplayStatics::GetAllActorsOfClass(GetWorld(), *actorClass, foundActors);

	//		for (AActor* actor : foundActors)
	//		{
	//			if (actor->GetName().Equals(*actorName))
	//			{
	//				*TargetActor = actor;

	//				TriggerBoxComponentData[i] = conmponentData;
	//				break;
	//			}
	//		}

	//	}
	//}
}

int AMlineTriggerSystemBase::ActorSetting(FName key, AActor** TargetActor, TSubclassOf<AActor>* actorClass, FString* actorName)
{
	TArray<AActor*> foundActors;
	if (TargetActor && *TargetActor &&(*TargetActor)->IsValidLowLevel())
	{
		*actorName = (*TargetActor)->GetName();
		*actorClass = (*TargetActor)->GetClass();
		return 1;
	}
	else if (TargetActor == nullptr)
	{
		//UE_LOG(LogMlineTriggerCustonEvent, Warning, TEXT("TargetActor is nullptr (Function : ActorSetting) "));
		return -1;
	}
	/*???͸? ???? ???°? ?´????? ???? ?ǹ? ?????? ?켱 false?? ?ش? ???? ??Ÿ???? ?س?.*/
	if (false && actorClass && *actorClass && !(*actorName).IsEmpty() && (*actorClass)->IsValidLowLevel())
	{
		UGameplayStatics::GetAllActorsOfClass(GetWorld(), *actorClass, foundActors);

		for (AActor* actor : foundActors)
		{
			if (actor->GetName().Equals(*actorName))
			{
				*TargetActor = actor;
				break;
			}
		}
		return 1;
	}
	else if (actorClass != nullptr)
	{
		//UE_LOG(LogMlineTriggerCustonEvent, Warning, TEXT("actorClass is nullptr (Function : ActorSetting) "));
		return -1;
	}
	//UE_LOG(LogMlineTriggerCustonEvent, Warning, TEXT("Unknown Error (Function : ActorSetting) "));
		return 0;


}
